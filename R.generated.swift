//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `react`.
    static let react = Rswift.FileResource(bundle: R.hostingBundle, name: "react", pathExtension: "")
    /// Resource file `slots`.
    static let slots = Rswift.FileResource(bundle: R.hostingBundle, name: "slots", pathExtension: "")
    
    /// `bundle.url(forResource: "react", withExtension: "")`
    static func react(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.react
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "slots", withExtension: "")`
    static func slots(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.slots
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `image-launch-screen`.
    static let imageLaunchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-launch-screen")
    /// Image `image-placeholder`.
    static let imagePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-placeholder")
    
    /// `UIImage(named: "image-launch-screen", bundle: ..., traitCollection: ...)`
    static func imageLaunchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageLaunchScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image-placeholder", bundle: ..., traitCollection: ...)`
    static func imagePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imagePlaceholder, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ReactAppTableViewCell`.
    static let reactAppTableViewCell = _R.nib._ReactAppTableViewCell()
    
    /// `UINib(name: "ReactAppTableViewCell", in: bundle)`
    static func reactAppTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reactAppTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `HybridContentStoryboard`.
    static let hybridContentStoryboard = _R.storyboard.hybridContentStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `ReactAppsStoryboard`.
    static let reactAppsStoryboard = _R.storyboard.reactAppsStoryboard()
    
    /// `UIStoryboard(name: "HybridContentStoryboard", bundle: ...)`
    static func hybridContentStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.hybridContentStoryboard)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "ReactAppsStoryboard", bundle: ...)`
    static func reactAppsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.reactAppsStoryboard)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 1 localization keys.
    struct launchScreen {
      /// en translation: VIPER Hybrid Prototype
      /// 
      /// Locales: en, el, et
      static let jKgSEJltText = Rswift.StringResource(key: "JKg-SE-jlt.text", tableName: "LaunchScreen", bundle: R.hostingBundle, locales: ["en", "el", "et"], comment: nil)
      
      /// en translation: VIPER Hybrid Prototype
      /// 
      /// Locales: en, el, et
      static func jKgSEJltText(_: Void = ()) -> String {
        return NSLocalizedString("JKg-SE-jlt.text", tableName: "LaunchScreen", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 2 localization keys.
    struct localizable {
      /// Base translation: Hybrid Content
      /// 
      /// Locales: en, Base, el, et
      static let hYBRID_CONTENT_NAVIGATION_BAR_TITLE = Rswift.StringResource(key: "HYBRID_CONTENT_NAVIGATION_BAR_TITLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "Base", "el", "et"], comment: nil)
      /// Base translation: React Applications
      /// 
      /// Locales: en, Base, el, et
      static let rEACT_APPS_NAVIGATION_BAR_TITLE = Rswift.StringResource(key: "REACT_APPS_NAVIGATION_BAR_TITLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "Base", "el", "et"], comment: nil)
      
      /// Base translation: Hybrid Content
      /// 
      /// Locales: en, Base, el, et
      static func hYBRID_CONTENT_NAVIGATION_BAR_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("HYBRID_CONTENT_NAVIGATION_BAR_TITLE", bundle: R.hostingBundle, value: "Hybrid Content", comment: "")
      }
      
      /// Base translation: React Applications
      /// 
      /// Locales: en, Base, el, et
      static func rEACT_APPS_NAVIGATION_BAR_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("REACT_APPS_NAVIGATION_BAR_TITLE", bundle: R.hostingBundle, value: "React Applications", comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ReactAppTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReactAppTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ReactAppTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReactAppTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try reactAppsStoryboard.validate()
      try launchScreen.validate()
      try hybridContentStoryboard.validate()
    }
    
    struct hybridContentStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let hybridContentViewController = StoryboardViewControllerResource<HybridContentViewController>(identifier: "HybridContentViewController")
      let name = "HybridContentStoryboard"
      
      func hybridContentViewController(_: Void = ()) -> HybridContentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: hybridContentViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.hybridContentStoryboard().hybridContentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'hybridContentViewController' could not be loaded from storyboard 'HybridContentStoryboard' as 'HybridContentViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "image-launch-screen") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image-launch-screen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct reactAppsStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ReactAppsStoryboard"
      let reactAppsViewController = StoryboardViewControllerResource<ReactAppsViewController>(identifier: "ReactAppsViewController")
      
      func reactAppsViewController(_: Void = ()) -> ReactAppsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reactAppsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.reactAppsStoryboard().reactAppsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reactAppsViewController' could not be loaded from storyboard 'ReactAppsStoryboard' as 'ReactAppsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
